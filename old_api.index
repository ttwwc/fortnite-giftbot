// /----------------------🪐-----------------------\
//      Made & Developed by @caledb & mewtwo#0001
// /------------------------------------------------\

const express = require('express');
const bodyParser = require('body-parser');
const { readFile, writeFile } = require("fs").promises;
const { Client } = require("fnbr");
const axios = require("axios");
const app = express();
const port = 21755;

(async () => {
  let auth;
  try {
    auth = { deviceAuth: JSON.parse(await readFile("./deviceAuth.json")) };
  } catch (e) {
    auth = {
      authorizationCode: async () => {
        return Client.consoleQuestion("Please enter an authorization code: ");
      },
    };
  }

  const client = new Client({ auth });

  client.on("deviceauth:created", (da) => {
    writeFile("./deviceAuth.json", JSON.stringify(da, null, 2));
  });

  async function extractNamesFromAPI(apiUrl) {
    try {
      const response = await fetch(apiUrl);
      const data = await response.json();

      const extractedNames = [];

      for (const key in data) {
        if (key.length === 4) {
          const friends = data[key];
          friends.forEach(friend => {
            extractedNames.push(friend.name);
          });
        }
      }

      return extractedNames;
    } catch (error) {
      console.error('Error fetching or parsing data:', error);
      return [];
    }
  }

  async function removeFriends(names) {
    for (const name of names) {
      const friendToRemove = client.friend.list.find((friend) => friend.displayName === name);
      if (friendToRemove) {
        await friendToRemove.remove();
        console.log(`Removed friend: ${friendToRemove.displayName}`);
        await new Promise(resolve => setTimeout(resolve, 2000)); // Wait for 2 seconds
      }
    }
  }

  const apiUrl = 'https://photon.lat/friend-api/v1/list';

  app.get('/friend-api/v2/clean', (req, res) => {
    extractNamesFromAPI(apiUrl)
      .then(names => {
        // call remove friends
        removeFriends(names);
        res.send('Friend removal process initiated.');
      })
      .catch(error => {
        console.error('Error:', error);
        res.status(500).send('Internal Server Error');
      });
  });

  // Friend request accepting system
  client.on("friend:request", async (req) => {
    req.accept();
    console.log(`Accepted: ${req.displayName}`);

    try {
      await axios.post(
        "http://photon.lat/friend-api/v1/accepted",
        {
          displayName: encodeURIComponent(req.displayName),
          client: 'PhotonGift9461',
          discord_id: '0000',
        }
      );
    } catch (error) {
      console.error('Error while sending to friend api:', error.message);
    }
  });

  try {
    await client.login();
    console.log(`Client started (${client.user.self.displayName})`);
    

    for (let pendingFriend of client.friend.pendingList) {
      let pendingFriendId = String(pendingFriend).split(",")[0];
      client.friend.remove(pendingFriendId);
      console.log(`Declined Request from ${pendingFriendId}`);
    }
  } catch (loginError) {
    console.error('Error while logging in:', loginError.message);
  }
})();

async function scrapeShopData() {
  try {
    const response = await axios.get('https://fortnite-api.com/v2/shop/br/combined');

    const shopData = response.data.data || {};
    const allEntries = [...(shopData.featured?.entries || []), ...(shopData.daily?.entries || [])];

    if (allEntries.length === 0) {
      throw new Error('No shop items found');
    }

    const uniqueNames = new Set();
    const devNameToOfferIdMap = new Map();

    allEntries.forEach(item => {
      const nameAndPrice = findNameAndPrice(item);
      const devName = item.devName;

      if (nameAndPrice && devName && nameAndPrice.price !== -1) {
        uniqueNames.add(nameAndPrice.name);
        devNameToOfferIdMap.set(devName, { offerId: item.offerId, price: nameAndPrice.price });
      }
    });

    const nameList = Array.from(uniqueNames);
    const result = [];

    // Collect the paired devName, offerId, and price
    nameList.forEach(name => {
      const devName = findDevNameByName(allEntries, name);
      const mapEntry = devNameToOfferIdMap.get(devName);

      // Check if the map entry exists and the price is not -1 before adding to the result
      if (mapEntry && mapEntry.price !== -1) {
        const { offerId, price } = mapEntry;
        result.push({ name, offerId, price });
      }
    });

    return result;
  } catch (error) {
    throw new Error(`Error scraping shop data: ${error.message}`);
  }
}

function findDevNameByName(allEntries, name) {
  const matchingItem = allEntries.find(item => findNameAndPrice(item).name === name);
  return matchingItem ? matchingItem.devName : null;
}

function findNameAndPrice(item) {
  if (item && item.devName) {
    return cleanUpNameAndPrice(item.devName);
  }

  return null;
}

function cleanUpNameAndPrice(name) {
  // Extract item name and price
  const cleanedName = name.replace(/\[VIRTUAL\]/gi, '').replace(/(\d+\s*x\s+|\s*for\s+-?\d+\s+MtxCurrency)/gi, '').split(',')[0].trim();

  // Extract the price
  const match = name.match(/for\s*(-?\d+)\s*MtxCurrency/i);
  const price = match ? parseInt(match[1]) : null;

  return { name: cleanedName, price: price };
}

app.get('/gift-api/shop', async (req, res) => {
  try {
    const shopItems = await scrapeShopData();
    res.json(shopItems);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

async function fetchFortniteShopData() {
    try {
        const response = await axios.get('https://fortnite-api.com/v2/shop/br');
        const shopData = response.data;
        return shopData;
    } catch (error) {
        console.error('Error fetching Fortnite shop data:', error.message);
        throw error;
    }
}

app.get('/gift-api/allshop', async (req, res) => {
    try {
        const shopData = await fetchFortniteShopData();
        const featuredEntries = shopData.data.featured.entries;

        // Extracting name, offer ID, and final price for each item
        const itemsInfo = featuredEntries.map(entry => {
            // Split devName by comma and trim each item
            const items = entry.devName.split(',').map(item => item.trim());
            // If more than three items, set name as 'Item Bundle'
            let name;
            if (items.length > 3) {
                name = [items[0].replace(/\[VIRTUAL\]1\s*x\s*/g, '') + ' Bundle'];
            } else {
                // Remove '1 x' and variations of 'for MtxCurrency' from each item's name
                name = items.map(item => item.replace(/\[VIRTUAL\]1\s*x\s*/g, '').replace(/\bfor\s*-?\d+\s*MtxCurrency\b/g, '').trim());
                // Keep only the first item if there are multiple
                name = [name[0]];
            }
            return {
                name,
                offerId: entry.offerId,
                price: entry.finalPrice
            };
        });

        res.json(itemsInfo);
    } catch (error) {
        console.error('Failed to fetch Fortnite shop data:', error.message);
        res.status(500).json({ error: error.message });
    }
});

app.use(bodyParser.json());

const client_id = "3446cd72694c4a4485d81b77adbb2141";
const client_secret = "9209d4a5e25a457fb9b07489d313b41a";
const device_id = "a1789011c8804481a94189f4856f8e5e";
const account_id = "cc9103969d2244fc95d0f91be70672ae";
const secret = "GCUDDRBI4J7NUY5VWN5BL3CXZH3X37GP";
const uri = "https://fngw-mcp-gc-livefn.ol.epicgames.com/fortnite/api/storefront/v2";

function getAccessToken() {
  return axios.post(
    `https://account-public-service-prod.ol.epicgames.com/account/api/oauth/token`,
    {
      grant_type: "device_auth",
      device_id: device_id,
      account_id: account_id,
      secret: secret,
    },
    {
      headers: {
        Authorization: `Basic ${Buffer.from(`${client_id}:${client_secret}`).toString("base64")}`,
        "Content-Type": "application/x-www-form-urlencoded",
      },
    }
  )
    .then((res) => res.data.access_token)
    .catch((error) => {
      console.error(error);
      throw new Error("Failed to get access token");
    });
}

function getUserWithToken(username, token) {
  return axios.get(
    `https://account-public-service-prod.ol.epicgames.com/account/api/public/account/displayName/${username}`,
    {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    }
  )
    .then((res) => res.data)
    .catch((error) => {
      console.error(error);
      throw new Error("Failed to get user data");
    });
}

function checkElegibility(id, offerId, token) {
  return axios.get(
    `${uri}/gift/check_eligibility/recipient/${id}/offer/${offerId}`,
    {
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
    }
  )
    .then((res) => res.data)
    .catch((error) => {
      console.error(error);
      throw new Error("Failed to check eligibility");
    });
}

function sendGift(username, offerId) {
  let user; // Declare user variable in a higher scope
  let token; // Declare token variable in a higher scope

  return getAccessToken()
    .then((accessToken) => {
      token = accessToken; // Assign access token to the variable in the higher scope
      return getUserWithToken(username, token);
    })
    .then((userData) => {
      user = userData; // Assign user data to the variable in the higher scope
      return checkElegibility(user.id, encodeURIComponent(offerId), token);
    })
    .then((checkElegibilityResult) => {
      if (typeof checkElegibilityResult.price.finalPrice === "number") {
        const final_price = checkElegibilityResult?.price?.finalPrice;
        return axios.post(
          `https://fngw-mcp-gc-livefn.ol.epicgames.com/fortnite/api/game/v2/profile/${account_id}/client/GiftCatalogEntry?profileId=common_core`,
          {
            offerId: offerId,
            currency: "MtxCurrency",
            currencySubType: "",
            expectedTotalPrice: +final_price,
            gameContext: "Frontend.CatabaScreen",
            receiverAccountIds: [user.id],
            giftWrapTemplateId: "",
            personalMessage: "",
          },
          {
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${token}`,
            },
          }
        );
      } else {
        throw new Error("Invalid final price");
      }
    })
    .then((res) => {
      if (res.status === 200) {
        return { send: true, message: "Gift sent successfully" };
      } else {
        return { send: false, message: "Gift not sent" };
      }
    })
    .catch((error) => {
      return {
        error: error?.response?.data?.errorMessage || error.message,
      };
    });
}


app.post('/gift-api/send', async (req, res) => {
  const bodyHeader = req.headers.body;

  // Check if the 'body' header is present
  if (bodyHeader) {
    try {
      const { displayName, offerId } = JSON.parse(bodyHeader);

      // Now you can use the provided code
      sendGift(displayName, offerId)
        .then((result) => res.json(result))
        .catch((error) => res.status(500).json({ error: error.message }));
    } catch (error) {
      res.status(400).json({ error: 'Invalid JSON in the body header' });
    }
  } else {
    res.status(401).json({ error: 'Unauthorized' });
  }
});


app.listen(port, () => {
  //console.log(`Api started (${port})`);
});
